# -*- coding: utf-8 -*-
"""Disease_Prediction_Using_Machine_Learning_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NpzIohh7pfW4XMxvrCSmEFmnf621CNxN
"""

# ========================
# üì¶ Import Libraries
# ========================
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
from statistics import mode
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from imblearn.over_sampling import RandomOverSampler
import warnings

import kagglehub

# Download latest version
path = kagglehub.dataset_download("itachi9604/disease-symptom-description-dataset")

print("Path to dataset files:", path)
data1= pd.read_csv('/kaggle/input/disease-symptom-description-dataset/dataset.csv')
data2=pd.read_csv('/kaggle/input/disease-symptom-description-dataset/Symptom-severity.csv')
data3=pd.read_csv('/kaggle/input/disease-symptom-description-dataset/symptom_Description.csv')
data4=pd.read_csv('/kaggle/input/disease-symptom-description-dataset/symptom_precaution.csv')

data1.describe()

data1.head()

data2.head()

data4.head()

# ========================
# üìÇ Load Datasets
# ========================
# Make sure to update paths accordingly
df = pd.read_csv("/kaggle/input/disease-symptom-description-dataset/dataset.csv").fillna("")
severity_df = pd.read_csv("/kaggle/input/disease-symptom-description-dataset/Symptom-severity.csv")
precaution_df = pd.read_csv("/kaggle/input/disease-symptom-description-dataset/symptom_precaution.csv").fillna("")

# Cleaning columns
severity_df.columns = severity_df.columns.str.strip().str.replace('\ufeff', '')
precaution_df.columns = precaution_df.columns.str.strip().str.replace('\ufeff', '')

# Dictionaries
symptom_severity = dict(zip(severity_df['Symptom'].str.lower().str.strip(), severity_df['weight']))
precaution_dict = {row["Disease"]: [row["Precaution_1"], row["Precaution_2"], row["Precaution_3"], row["Precaution_4"]] for _, row in precaution_df.iterrows()}

# ========================
# üßπ Prepare Data
# ========================
all_symptoms = sorted(set(symptom.lower().strip() for col in df.columns[1:] for symptom in df[col].unique() if symptom))
weighted_matrix = pd.DataFrame(0, index=np.arange(len(df)), columns=all_symptoms)

for i, row in df.iterrows():
    for symptom in row[1:]:
        if symptom:
            s_clean = symptom.lower().strip()
            if s_clean in symptom_severity:
                weighted_matrix.at[i, s_clean] = symptom_severity[s_clean]

encoder = LabelEncoder()
weighted_matrix["Disease"] = encoder.fit_transform(df["Disease"])

X = weighted_matrix.drop("Disease", axis=1)
y = weighted_matrix["Disease"]

# Resampling
X_resampled, y_resampled = RandomOverSampler(random_state=42).fit_resample(X, y)

# Train/Validation/Test split
X_trainval, X_test, y_trainval, y_test = train_test_split(X_resampled, y_resampled, test_size=0.15, random_state=42, stratify=y_resampled)
X_train, X_val, y_train, y_val = train_test_split(X_trainval, y_trainval, test_size=0.1765, random_state=42, stratify=y_trainval)

# ========================
# üìä Visualize Class Distribution
# ========================
plt.figure(figsize=(18, 6))
sns.countplot(x=y)
plt.title("Original Class Distribution")
plt.xticks(rotation=90)
plt.show()

# ========================
# üõ†Ô∏è Train Models
# ========================
models = {
    "SVM": SVC(probability=True),
    "Naive Bayes": GaussianNB(),
    "Random Forest": RandomForestClassifier(random_state=42),
}

for name, model in models.items():
    model.fit(X_train, y_train)

# Save models
svm_model = models["SVM"]
nb_model = models["Naive Bayes"]
rf_model = models["Random Forest"]

# ========================
# üìä Confusion Matrix Plots
# ========================
def plot_confusion_matrix(model, X, y, title):
    preds = model.predict(X)
    cm = confusion_matrix(y, preds)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=encoder.classes_)
    fig, ax = plt.subplots(figsize=(12, 12))
    disp.plot(ax=ax, cmap='Blues', xticks_rotation=90)
    plt.title(title)
    plt.show()

# Plot for each model
plot_confusion_matrix(rf_model, X_val, y_val, "Random Forest Confusion Matrix (Validation Set)")
plot_confusion_matrix(nb_model, X_val, y_val, "Naive Bayes Confusion Matrix (Validation Set)")
plot_confusion_matrix(svm_model, X_val, y_val, "SVM Confusion Matrix (Validation Set)")

# ========================
# üî• Multi-Disease Prediction
# ========================
symptom_index = {symptom: idx for idx, symptom in enumerate(X.columns)}

def predict_multiple_diseases(input_symptoms):
    input_list = [0] * len(symptom_index)
    symptom_list = [s.strip().lower().replace(" ", "_") for s in input_symptoms.split(",")]

    for s in symptom_list:
        if s in symptom_index:
            input_list[symptom_index[s]] = symptom_severity.get(s.replace("_", " "), 0)

    input_df = pd.DataFrame([input_list], columns=X.columns)

    pred_rf = encoder.classes_[rf_model.predict(input_df)[0]]
    pred_nb = encoder.classes_[nb_model.predict(input_df)[0]]
    pred_svm = encoder.classes_[svm_model.predict(input_df)[0]]

    all_preds = [pred_rf, pred_nb, pred_svm]
    prediction_counts = Counter(all_preds)
    top_predictions = prediction_counts.most_common(3)

    result = []
    for disease, count in top_predictions:
        precautions = precaution_dict.get(disease, ["Not available"] * 4)
        result.append({
            "Disease": disease,
            "Votes": count,
            "Precautions": precautions
        })

    return result

# ========================
# üîé Example Prediction
# ========================
example_symptoms = "itching, skin rash, nodal skin eruptions"
results = predict_multiple_diseases(example_symptoms)

for idx, res in enumerate(results):
    print(f"Prediction #{idx+1}: {res['Disease']} (Votes: {res['Votes']}/3)")
    print("Precautions:")
    for p in res['Precautions']:
        print(f"- {p}")
    print("\n")

